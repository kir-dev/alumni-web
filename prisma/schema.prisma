// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL")
  // directUrl = env("DATABASE_URL_NON_POOLING")
}

model Group {
  id            String  @id @default(uuid())
  name          String
  description   String
  color         String?
  parentGroupId String?
  parentGroup   Group?  @relation("ParentGroup", fields: [parentGroupId], references: [id])
  subGroups     Group[] @relation("ParentGroup")

  members Membership[]
  events  Event[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  News        News[]
  staticSites StaticSite[]
  domain      GroupDomain?
}

model Membership {
  userId  String
  groupId String
  isAdmin Boolean          @default(false)
  status  MembershipStatus @default(Pending)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, groupId])
}

enum MembershipStatus {
  Dependent
  Pending
  Approved
  Rejected
}

model GroupDomain {
  domain  String @unique
  groupId String @unique

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String

  isPrivate Boolean @default(false)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  EventApplication EventApplication[]
}

model EventApplication {
  userId  String
  eventId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, eventId])
}

model News {
  id      String @id @default(uuid())
  title   String
  content String

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  publishDate DateTime
  isPrivate   Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(uuid())
  firstName     String    @default("")
  lastName      String    @default("")
  nickname      String    @default("")
  password      String?
  email         String    @unique
  emailVerified DateTime?
  isSuperAdmin  Boolean   @default(false)

  phone   String @default("")
  address String @default("")

  Membership       Membership[]
  EventApplication EventApplication[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TfaToken          TfaToken?
  VerificationToken VerificationToken[]
}

model TfaToken {
  id        String  @id @default(uuid())
  userId    String  @unique
  token     String  @unique
  secret    String
  isEnabled Boolean @default(false)

  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  token   String                @unique
  expires DateTime
  userId  String
  type    VerificationTokenType
  user    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token, type])
}

enum VerificationTokenType {
  Email
  Password
}

model StaticSite {
  id         String      @id @default(uuid())
  title      String
  url        String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  siteBlocks SiteBlock[]
  groupId    String?
  group      Group?      @relation(fields: [groupId], references: [id], onDelete: SetNull)
}

model SiteBlock {
  id         String        @id @default(uuid())
  siteId     String
  type       SiteBlockType
  content    String
  staticSite StaticSite    @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

enum SiteBlockType {
  Text
  Image
  ImageText
}
