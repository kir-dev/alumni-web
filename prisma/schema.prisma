// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  phone     String @default("")
  address   String @default("")

  memberships       Membership[]
  eventApplications EventApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id            String  @id @default(uuid())
  name          String
  description   String
  parentGroupId String?
  parentGroup   Group?  @relation("ParentGroup", fields: [parentGroupId], references: [id])
  subGroups     Group[] @relation("ParentGroup")

  members Membership[]
  events  Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Membership {
  userId  String
  groupId String
  isAdmin Boolean          @default(false)
  status  MembershipStatus @default(Pending)

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, groupId])
}

enum MembershipStatus {
  Pending
  Approved
  Rejected
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String

  isPrivate Boolean @default(false)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  EventApplication EventApplication[]
}

model EventApplication {
  userId  String
  eventId String

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, eventId])
}

model News {
  id      String @id @default(uuid())
  title   String
  content String

  publishDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
